#  This file is part of the eliona project.
#  Copyright Â© 2022 LEICOM iTEC AG. All Rights Reserved.
#  ______ _ _
# |  ____| (_)
# | |__  | |_  ___  _ __   __ _
# |  __| | | |/ _ \| '_ \ / _` |
# | |____| | | (_) | | | | (_| |
# |______|_|_|\___/|_| |_|\__,_|
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
#  BUT NOT LIMITED  TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NON INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Use this docker-compose.yml to start a simplified Eliona environment for mocking purposes. This mock
# provides a database and an Eliona API endpoint. Both can be used to develop and test apps and other
# components of Eliona against an Eliona environment

version: "3.7"

networks:
  eliona-mock-network:
    name: eliona-mock-network

services:

  # Simplified Eliona database as backend.
  # CONNECTION_STRING=postgres://postgres:secret@database:5432
  # CONNECTION_STRING=postgres://postgres:secret@localhost:5432
  database:
    image: debezium/postgres:12
    container_name: database
    networks:
      eliona-mock-network:
    environment:
      POSTGRES_PASSWORD: secret
      PGPORT: 5432
      TZ: Europe/Zurich
    volumes:
      - ./init/database.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    ports:
      - "5432:5432"

  # Server representing the Eliona API.
  # API_ENDPOINT=http://api-v2:3000/v2
  # API_ENDPOINT=http://localhost:3000/v2
  api-v2:
    image: eliona/api-v2:latest
    container_name: api-v2
    networks:
      eliona-mock-network:
    depends_on:
      - database
    environment:
      CONNECTION_STRING: postgres://postgres:secret@database:5432
      BROKERS: kafka:9092
    restart: always
    ports:
      - "3000:3000"

  # Kafka broker
  # BROKERS=kafka:9092
  # BROKERS=localhost:9092
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    networks:
      eliona-mock-network:
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./init/kraft-update.sh:/kraft-update.sh
    command: "bash -c '/kraft-update.sh && /etc/confluent/docker/run'"

  init-kafka:
    image: confluentinc/cp-kafka:7.3.0
    networks:
      eliona-mock-network:
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic eliona.calculator.raw.v1 --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  debezium:
    image: debezium/connect:1.9
    container_name: debezium
    networks:
      eliona-mock-network:
    depends_on:
      - kafka
      - database
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: debezium
      CONFIG_STORAGE_TOPIC: eliona.debezium.configs
      OFFSET_STORAGE_TOPIC: eliona.debezium.offsets
      STATUS_STORAGE_TOPIC: eliona.debezium.statuses
    volumes:
      - ./init/debezium.sh:/debezium.sh
      - ./init/eliona-connector.json:/eliona-connector.json
    command:
      - /debezium.sh